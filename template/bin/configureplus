#!/bin/bash

# Script: configureplus - a minimal autoconf(1)-like configure tool, which depends only on bash
#
# Author: Murat Uenalan <murat.uenalan@gmail.com

# source `which configureplus.bash`

CONFIGUREPLUS_PWD=$PWD
CONFIGUREPLUS_VERSION=0.12
CONFIGUREPLUS_DIR_OUT=.configureplus
CONFIGUREPLUS_DIR_OUT_SESSIONS=$CONFIGUREPLUS_DIR_OUT/session
CONFIGUREPLUS_ZERO_ARG_BASENAME=$(basename $0)
CONFIGUREPLUS_DIR_CONFIG=~/.config/configureplus

# functions

function echo_local
{
        >&2 echo "[INFO stdout, $CONFIGUREPLUS_ZERO_ARG_BASENAME] : {" $@ "}" 
}

function warn_local
{
    if [ "$CONFIGUREPLUS_DEBUG" ]; then

        >&2 echo "[WARN stdout, $CONFIGUREPLUS_ZERO_ARG_BASENAME] : {" $@ "}" 

    fi
}

function configureplus_env
{
    warn_local Sourcing ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/global.bash_local
    
    source ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/global.bash_local

    set|perl -ne 'print if /^CONFIGURE(PLUS)?_/;'

    warn_local "Note: Your local shell variables are not shown. Rerun: '$ set|grep CONFIGURE' if needed." 
}

function configureplus_status
{
    warn_local Showing ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/

    tree ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/

    if [ -d "$CONFIGUREPLUS_DIR_OUT/" ]; then

        tree $CONFIGUREPLUS_DIR_OUT/

    fi
}

function configureplus_set
{
    FNAME=$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1
    
    if [ "$3" == "global" ]; then

        FNAME=~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1

    fi
    
    warn_local Setting $FNAME

    >$FNAME echo $2
}

function configureplus_get
{
    warn_local Getting $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1

    if [ -f $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1 ] && [ "$2" != "global" ]; then
        
        FNAME=$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1
    
    else

        FNAME=$CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1

        if [ ! -f $FNAME ]; then

            warn_local the global path $FNAME was not available. Now try to global/

            FNAME=$CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/global/$1

            warn_local Now looking for FNAME=$FNAME

        fi
    fi

    echo_local cat $FNAME

    cat $FNAME

    echo ""
}

function configureplus_sessions_list
{
    warn_local Getting global sessions $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/session

    find $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/session -maxdepth 1 -mindepth 1 -type d

    if [ -d "$CONFIGUREPLUS_DIR_OUT/" ]; then

        warn_local Getting local sessions $CONFIGUREPLUS_DIR_OUT/session

        find $CONFIGUREPLUS_DIR_OUT -maxdepth 1 -mindepth 1 -type d

    fi

    echo_local Currently CONFIGUREPLUS_SESSION=$CONFIGUREPLUS_SESSION

}

if [[ "$1" == 'help' ]]; then

    cat <<UNTIL_HERE

configureplus - a minimal autoconf(1)-like configure tool, which depends only on bash

  Usage: 

      configureplus <commands> [ARGS]

  Commands:

      help                   - help

      env                    - show env variables

      set <varname> <value> [global] - set variable (for the session CONFIGUREPLUS_SESSION); respectively local or global (if session present)

      get <varname>         [global] - get variable (for the session CONFIGUREPLUS_SESSION); respectively local or global (if session present)

      status                 - show local/global configuration tree

      list                   - list local/global session paths'

  Examples:

      $ configureplus set ALPHA 123

      $ configureplus get ALPHA
      123

      $ CONFIGUREPLUS_SESSION=local1 template/bin/configureplus get SESSION
      [WARN stdout, configureplus] : { Could not find local variable, will look for global }
      local1

  Environment:

      CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD
      CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION
      CONFIGUREPLUS_DIR_OUT=$CONFIGUREPLUS_DIR_OUT
      CONFIGUREPLUS_DIR_OUT_SESSIONS=$CONFIGUREPLUS_DIR_OUT_SESSIONS
      CONFIGUREPLUS_ZERO_ARG_BASENAME=$CONFIGUREPLUS_ZERO_ARG_BASENAME
      CONFIGUREPLUS_DIR_CONFIG=$CONFIGUREPLUS_DIR_CONFIG

UNTIL_HERE

    exit
fi

# defaults

if [ ! -d "$CONFIGUREPLUS_DIR_CONFIG" ]; then
    
    export CONFIGUREPLUS_DIR_CONFIG_EMPTY=1

    warn_local "init $CONFIGUREPLUS_DIR_CONFIG"

    mkdir -p $CONFIGUREPLUS_DIR_CONFIG
    
fi


if [[ ! "$CONFIGUREPLUS_DEBUG" ]]; then

    CONFIGUREPLUS_DEBUG=$0

fi


if [[ "$1" == '--detect-os' ]]; then

    echo $OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION

    warn_local "--detect-os: \$OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION"

fi
      
if [[ -z "$CONFIGUREPLUS_SESSION" ]]; then

    warn_local CONFIGUREPLUS_SESSION not set. Looking for "$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION"

    if [ -f "$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION" ]; then

	CONFIGUREPLUS_SESSION=$(cat $CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION)
	
	warn_local Loading $CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION=$CONFIGUREPLUS_SESSION
	
    else

        if [ "$CONFIGUREPLUS_DIR_OUT" == `basename $PWD` ]; then

            warn_local "init $CONFIGUREPLUS_DIR_OUT ... *SKIP* because we are currently inside one."

            exit
        fi

	CONFIGUREPLUS_DEBUG=1 warn_local ERROR_NOT_SET_CONFIGUREPLUS_SESSION
	
	warn_local Will invoke: mkdir -p $CONFIGUREPLUS_DIR_OUT/global

        mkdir -p $CONFIGUREPLUS_DIR_OUT/global

	warn_local Will invoke: echo $OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION

	echo $OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION

	warn_local Retry configureplus again.

	exit
    fi

fi




if [[ "$1" == 'list' ]]; then

    configureplus_sessions_list

    exit
fi

if [[ "$1" == 'env' ]]; then

    configureplus_env

    exit
fi

if [[ "$1" == 'status' ]]; then

    configureplus_status

    exit
fi


if [[ "$1" == 'set' ]]; then

    configureplus_set $2 $3 $4

    exit
fi

if [[ "$1" == 'get' ]]; then

    configureplus_get $2 $3

    exit
fi




# $CONFIGUREPLUS_SESSION

mkdir -p $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION

# dynamic

if [ ! -f $CONFIGUREPLUS_DIR_OUT/dynamic.bash ]; then

    warn_local Probing $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash
    
    if [ -f $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash ]; then

        warn_local cp $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash $CONFIGUREPLUS_DIR_OUT/

        cp $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash $CONFIGUREPLUS_DIR_OUT/

    else

        warn_local touch $CONFIGUREPLUS_DIR_OUT/dynamic.bash

        touch $CONFIGUREPLUS_DIR_OUT/dynamic.bash

    fi
    

fi


if [ ! -d $CONFIGUREPLUS_DIR_OUT/global ]; then

    mkdir -p $CONFIGUREPLUS_DIR_OUT/global 

fi

warn_local source $CONFIGUREPLUS_DIR_OUT/dynamic.bash

source $CONFIGUREPLUS_DIR_OUT/dynamic.bash

# global

for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

    cp $VARFILE $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/

done

# std

>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_PWD              echo $CONFIGUREPLUS_PWD
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_SESSION          echo $CONFIGUREPLUS_SESSION
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_VERSION          echo $CONFIGUREPLUS_VERSION
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_DIR_CONFIG       echo $CONFIGUREPLUS_DIR_CONFIG
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_DIR_OUT          echo $CONFIGUREPLUS_DIR_OUT
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_DIR_OUT_SESSIONS echo $CONFIGUREPLUS_DIR_OUT_SESSIONS


# functions

function summary
{
    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%-60s [%s]\n" "$VARFILE = '$(cat $VARFILE)'" "$(cat $DOCFILE)"

	else

	    echo $VARFILE "=" `cat $VARFILE`
	fi
	
	
    done
}


# mk

function generate_configure_global_mk
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.mk

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.mk
    echo "# Note: space before a comment are part of a variable" >>$CONFIGUREPLUS_DIR_OUT/global.mk

    echo >>$CONFIGUREPLUS_DIR_OUT/global.mk

    for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%s# %s\n" "$BASENAME=\$(shell cat $VARFILE)" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.mk

	else

	    echo "$BASENAME=\$(shell cat $VARFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.mk
	fi
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.mk generated
}

function generate_configure_session_mk
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk
    echo "# Note: space before a comment are part of a variable" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%s# %s\n" "$BASENAME=\$(shell cat $VARFILE)" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

	else

	    echo "$BASENAME=\$(shell cat $VARFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk
	fi
	
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk generated
}

function generate_configure_global_bash
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.bash

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.bash

    echo >>$CONFIGUREPLUS_DIR_OUT/global.bash

    for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "export %-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.bash

	else

	    printf "export %s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT/global.bash
	fi
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.bash generated
}



function generate_configure_global_bash_local
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.bash_local

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.bash_local

    echo >>$CONFIGUREPLUS_DIR_OUT/global.bash_local

    for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.bash_local

	else

	    printf "%s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT/global.bash_local
	fi
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.bash_local generated
}

function generate_configure_global_json
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.json

    # JSON does not support comments
    #    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo "[" >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo >>$CONFIGUREPLUS_DIR_OUT/global.json


    local ARRAY=($CONFIGUREPLUS_DIR_OUT/global/*)

    local ARRAY_LEN=${#ARRAY[@]}

    local CNT=1

    for VARFILE in ${ARRAY[@]}; do

	local BASENAME=$(basename $VARFILE)

        COMMA=

        if [[ $CNT < $ARRAY_LEN ]]; then

            COMMA=,
            
        fi

	printf -v VAR '   "%s" : "%s"%s'  $BASENAME "$(cat $VARFILE)" $COMMA

        echo "$VAR"  >>$CONFIGUREPLUS_DIR_OUT/global.json

	let CNT=$CNT+1
        
    done

    echo >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo "]" >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.json generated
}





# session

function generate_configure_session_bash
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "export %-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

	else

	    printf "export %s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash
	fi
	
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash generated
}

function generate_configure_session_bash_local
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

	else

	    printf "%s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local
	fi
	
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local generated
}

function generate_configure_session_json
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo "[" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    local ARRAY=($(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort))

    local ARRAY_LEN=${#ARRAY[@]}

    local CNT=1

    for VARFILE in ${ARRAY[@]}; do

	BASENAME=$(basename $VARFILE)

        COMMA=

#        echo CNT=$CNT ARRAY_LEN=$ARRAY_LEN
        
        if [[ $CNT -lt $ARRAY_LEN ]]; then

            COMMA=,
            
        fi

	printf -v VAR '   "%s" : "%s"%s'  $BASENAME "$(cat $VARFILE)" $COMMA

        echo "$VAR"  >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

	let CNT=$CNT+1

    done

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo "]" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json generated
}

# main

summary

generate_configure_global_mk

generate_configure_global_bash

generate_configure_global_bash_local

generate_configure_global_json

generate_configure_session_mk

generate_configure_session_bash

generate_configure_session_bash_local

generate_configure_session_json


function join_array_comma
{
    local SEP=$1

    shift
    
    local ARRAY=$@
    
    ARRAY_LEN=${#ARRAY[@]}

#    echo ARRAY="${ARRAY[@]} .."
    
#    echo ARRAY_LEN=$ARRAY_LEN

    CNT=1

    RESULT=()

    for ENTRY in ${ARRAY[@]}; do

        COMMA=

        if [[ $CNT -lt $ARRAY_LEN ]]; then

            COMMA=,
            
        fi

	printf -v VAR '%s%s' $ENTRY $COMMA

        echo "VAR=$VAR"
        
        RESULT=("${RESULT[@]}" $VAR)
                
	let CNT=$CNT+1

    done

    echo ${RESULT[@]}
}

#test
#join_array_comma ",\n" "ALPHA : 1" "BETA : 2" "GAMMA : 3"

