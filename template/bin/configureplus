#!/bin/bash

# Script: configureplus - a minimal autoconf(1)-like configure tool, which depends only on bash
#
# Author: Murat Uenalan <murat.uenalan@gmail.com

# source `which configureplus.bash`

CONFIGUREPLUS_PWD=$PWD
CONFIGUREPLUS_VERSION=0.12
CONFIGUREPLUS_DIR_OUT=.configureplus
CONFIGUREPLUS_DIR_OUT_SESSIONS=$CONFIGUREPLUS_DIR_OUT/session
CONFIGUREPLUS_ZERO_ARG_BASENAME=$(basename $0)
CONFIGUREPLUS_DIR_CONFIG=~/.config/configureplus

# functions

function echo_local
{
        >&2 echo "[INFO stdout, $CONFIGUREPLUS_ZERO_ARG_BASENAME] : {" $@ "}" 
}

function warn_local
{
    if [ "$CONFIGUREPLUS_DEBUG" ]; then

        >&2 echo "[WARN stdout, $CONFIGUREPLUS_ZERO_ARG_BASENAME] : {" $@ "}" 

    fi
}

function configureplus_env
{
    warn_local Sourcing ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/global.bash_local
    
    source ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/global.bash_local

    set|perl -ne 'print if /^CONFIGURE(PLUS)?_/;'

    warn_local "Note: Your local shell variables are not shown. Rerun: '$ set|grep CONFIGURE' if needed." 
}

function configureplus_status
{
    warn_local Showing ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/

    tree ~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT/

    if [ -d "$CONFIGUREPLUS_DIR_OUT/" ]; then

        tree $CONFIGUREPLUS_DIR_OUT/

    fi
}

function configureplus_set
{
    FNAME=$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1
    
    if [ "$3" == "global" ]; then

        FNAME=~/.config/configureplus/$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1

    fi
    
    warn_local Setting $FNAME

    >$FNAME echo $2
}

function configureplus_get
{
    warn_local Getting $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1

    if [ -f $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1 ] && [ "$2" != "global" ]; then
        
        FNAME=$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1
    
    else

        FNAME=$CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/$1

        if [ ! -f $FNAME ]; then

            warn_local the global path $FNAME was not available. Now try to global/

            FNAME=$CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/global/$1

            warn_local Now looking for FNAME=$FNAME

        fi
    fi

    echo_local cat $FNAME

    cat $FNAME

    echo ""
}

function configureplus_sessions_list
{
    warn_local Getting global sessions $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/session

    find $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/session -maxdepth 1 -mindepth 1 -type d

    if [ -d "$CONFIGUREPLUS_DIR_OUT/" ]; then

        warn_local Getting local sessions $CONFIGUREPLUS_DIR_OUT/session

        find $CONFIGUREPLUS_DIR_OUT -maxdepth 1 -mindepth 1 -type d

    fi

    echo_local Currently CONFIGUREPLUS_SESSION=$CONFIGUREPLUS_SESSION

}

if [[ "$1" == 'usage' ]]; then

    cat <<UNTIL_HERE

configureplus - a minimal autoconf(1)-like configure tool, which depends only on bash

  Usage: 

      configureplus <commands> [ARGS]

  Commands:

      usage                  - usage

      man                    - manpage (markdown)

      help <command>         - help

      env                    - show env variables

      set <varname> <value> [global] - set variable (for the session CONFIGUREPLUS_SESSION); respectively local or global (if session present)

      get <varname>         [global] - get variable (for the session CONFIGUREPLUS_SESSION); respectively local-session or global-session (if not present, ~/.config/configureplus/.configureplus/global/)

      status                 - show local/global configuration tree

      list                   - list local/global session paths'

  Examples:

      $ configureplus set ALPHA 123

      $ configureplus get ALPHA
      123

      # Create a local session

      $ CONFIGUREPLUS_SESSION=local1 configureplus get SESSION
      [WARN stdout, configureplus] : { Could not find local variable, will look for global }
      local1

      # Update the global session

      $ cd ~/.config/configureplus
      $ configureplus 

  Environment:

      CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD
      CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION
      CONFIGUREPLUS_DIR_OUT=$CONFIGUREPLUS_DIR_OUT
      CONFIGUREPLUS_DIR_OUT_SESSIONS=$CONFIGUREPLUS_DIR_OUT_SESSIONS
      CONFIGUREPLUS_ZERO_ARG_BASENAME=$CONFIGUREPLUS_ZERO_ARG_BASENAME
      CONFIGUREPLUS_DIR_CONFIG=$CONFIGUREPLUS_DIR_CONFIG

UNTIL_HERE

    exit
    
fi

if [[ "$1" == 'help' ]]; then

    cat <<UNTIL_HERE

  Help: 

      configureplus help $2

  **DOCUMENTATION UNAVAILABLE**      

UNTIL_HERE

    exit
    
fi


if [[ "$1" == 'man' ]]; then

    cat <<UNTIL_HERE

DOCUMENTATION
=============

# configureplus

Minimal autoconfig-like configure tool. Can be used to locally create a (.configureplus) folder, which holds variables about the platform. Custom variables can be added. 
Moreover, a global fallback for variables is available (~/.config/configureplus/.configureplus)

# Synopsis

 $ make install
 $ pushd build/platforms/darwin19
 $ make install-systemwide
 $ configureplus man
 $ cd somewhere
 $ configureplus                                              # create a local .configureplus/ folder with default platform variables (use $OSTYPE)
 $ CONFIGUREPLUS_SESSION=local1 configureplus set ALPHA 123   # set variable ALPHA in session 'local1'
 $ CONFIGUREPLUS_SESSION=local1 configureplus get ALPHA      
 123
 
# Description

Architecture dependency is traditionally detected with an universal **configure** tool. This packages provide similar means, and is not intended to be compatible to the **autoconf** chain. However, it solves a similar generic problem, but beeing more granular and more friendly.

# Aims

- Be universal, with absolute minimal prerequisites: bash.
- Keep it simple. Files are variables, that are used at each step.
- A recorded configuration should be transportable (such as stored in ~/.config for reuse).
- Multiple configurations (sessions) should be able to co-exists. Allowing the switch to a particular **session-key**; testing different versions.

# Supported platforms
This is a multiarch package, where during the build process the platform is detected and a architecture dependant version is manufactured into the platforms directory.

## darwin19 (macos)
There are two alternative installation options. Per default, the program is unpacked into this directory, and the userprofile is modified to include the corresponding bin/ into the PATH system variable.

### INSTALL userprofile (darwin19)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/darwin19
    $ make install
      .. installing userprofile

### INSTALL systemwide (darwin19)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/darwin19
    $ make install-systemwide
      .. installing systemwide

## linux-gnu
There are two alternative installation options. Per default, the program is unpacked into this directory, and the userprofile is modified to include the corresponding bin/ into the PATH system variable.

### INSTALL userprofile (linux-gnu)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/linux-gnu
    $ make install
      .. installing userprofile

### INSTALL systemwide (linux-gnu)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/linux-gnu
    $ make install-systemwide
      .. installing systemwide

# SYNOPSIS (darwin19)

    # Warn, because .configureplus/session/darwin19/CONFIGUREPLUS_SESSION is not set
    
    $ configureplus
    [WARN stdout, configureplus] : { ERROR_NOT_SET_CONFIGUREPLUS_SESSION }
    [WARN stdout, configureplus] : { Will invoke: echo darwin19 }
    [WARN stdout, configureplus] : { Retry configureplus again. }    

    $ configureplus
    [WARN stdout, configureplus] : { Loading .configureplus/global/CONFIGUREPLUS_SESSION=darwin19 }
- .configureplus/session/darwin19/CONFIGUREPLUS_DIR_CONFIG = /Users/muenalan/.config/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS_DIR_OUT = .configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS_DIR_OUT_SESSIONS = .configureplus/session
- .configureplus/session/darwin19/CONFIGUREPLUS_PWD = /Users/muenalan/git-workdirs/github.com/muenalan/bash/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS_SESSION = 'darwin19' [session-id (such as $OSTYPE)]
- .configureplus/session/darwin19/CONFIGUREPLUS_VERSION = 0.1
- .configureplus/session/darwin19/CONFIGURE_BASH_PROFILE_FILE = /Users/muenalan/.bash_profile
- .configureplus/session/darwin19/CONFIGURE_DIR_OUTPUT = 'platforms' [folder for general and os-specific files (merged with CONFIG_DIR_TEMPLATE)]
- .configureplus/session/darwin19/CONFIGURE_DIR_TEMPLATE = 'template' [folder for os-specific files and template files merged]
- .configureplus/session/darwin19/CONFIGURE_FLAG_TOOL_BTEST = '' [btest *testing* tool path]
- .configureplus/session/darwin19/CONFIGURE_GIT_TAG = v0.0.1
- .configureplus/session/darwin19/CONFIGURE_MKTEMP = '/var/folders/px/ctnmlq5n5gbf154mj25wzdxh0000gn/T/tmp.FU7FWYDy' [make session temp dir]
- .configureplus/session/darwin19/CONFIGURE_OSTYPE = 'darwin19' [current os identifier]
- .configureplus/session/darwin19/CONFIGURE_PKGNAME = 'configureplus' [distribution package name]
- .configureplus/session/darwin19/CONFIGURE_TIMESTAMP = Mon May 22 11:41:16 CEST 2023
- .configureplus/session/darwin19/CONFIGURE_VERSION = '0.0.1'  [distribution version]
    INFO: .configureplus/global.mk generated
    INFO: .configureplus/global.bash generated
    INFO: .configureplus/global.bash_local generated
    INFO: .configureplus/session/darwin19.mk generated
    INFO: .configureplus/session/darwin19.bash generated
    INFO: .configureplus/session/darwin19.bash_local generated

    $ configureplus
    Configuring (darwin19) ...
- .configureplus/session/darwin19/CONFIGUREPLUS_DIR_CONFIG = /Users/muenalan/.config/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS_DIR_OUT = .configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS_DIR_OUT_SESSIONS = .configureplus/session
- .configureplus/session/darwin19/CONFIGUREPLUS_PWD = /Users/muenalan/git-workdirs/github.com/muenalan/bash/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS_SESSION = darwin19
- .configureplus/session/darwin19/CONFIGUREPLUS_VERSION = 0.1
- .configureplus/session/darwin19/CONFIGURE_BASH_PROFILE_FILE = /Users/muenalan/.bash_profile
- .configureplus/session/darwin19/CONFIGURE_DIR_OUTPUT = 'platforms' [folder for general and os-specific files (merged with CONFIG_DIR_TEMPLATE)]
- .configureplus/session/darwin19/CONFIGURE_DIR_TEMPLATE = 'template' [folder for os-specific files and template files merged]
- .configureplus/session/darwin19/CONFIGURE_FLAG_TOOL_BTEST = '' [btest *testing* tool path]
- .configureplus/session/darwin19/CONFIGURE_MKTEMP = '/var/folders/px/ctnmlq5n5gbf154mj25wzdxh0000gn/T/tmp.2i0aHmR6' [make session temp dir]
- .configureplus/session/darwin19/CONFIGURE_OSTYPE = 'darwin19' [current os identifier]
- .configureplus/session/darwin19/CONFIGURE_PKGNAME = 'configureplus' [distribution package name]
- .configureplus/session/darwin19/CONFIGURE_TIMESTAMP = Thu May 18 16:54:08 CEST 2023
- .configureplus/session/darwin19/CONFIGURE_VERSION = '0.1'    [distribution version]
- INFO: .configureplus/global.mk generated
- INFO: .configureplus/global.bash generated
- INFO: .configureplus/global.bash_local generated
- INFO: .configureplus/session/darwin19.mk generated
- INFO: .configureplus/session/darwin19.bash generated
- INFO: .configureplus/session/darwin19.bash_local generated
    $ echo value1 .configureplus/global/var1
    $ echo value2 .configureplus/global/var2
    $ echo value3 .configureplus/global/var3
    $ cat .configureplus/dynamic.bash
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE_BASH_PROFILE_FILE echo $HOME/.bash_profile
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_DIR_CONFIG    echo $HOME/.config/$CONFIGURE_PKG
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE_OSTYPE            echo $OSTYPE 
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE_MKTEMP            echo `mktemp -d` 
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE_FLAG_TOOL_BTEST   which btest
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE_TIMESTAMP         date
  
# INPUT .configureplus
Files are used to configure the configuration variables.

# SPEC

- .configureplus/global/**VARNAME**                      : global variables, stored as single files
- .confgureplus/**global**.mk                            : global variables single-file (Makefile part)
- .confgureplus/**global**.bash                          : global variables single-file (bash source, export)
- .confgureplus/**global**.bash_local                    : global variables single-file (bash source)
- .configureplus/doc/**VARNAME**                         : variable description, single file
- .confgureplus/session/**session-id**/**VARSESSION-ID** : variable file of session **session-id**
- .confgureplus/session/**session-id**.mk                : session as include'able Makefile part
- .confgureplus/session/**session-id**.bash              : session as include'able bash source (exported variables)
- .confgureplus/session/**session-id**.bash_local        : session as include'able bash source
- .confgureplus/**dynamic**.bash                         : script invoked by configureplus
- .confgureplus/**currentsession**.mk                    : include'able session single-file (Makefile part)
- .confgureplus/**currentsession**.bash                  : include'able session single-file (bash, export)
- .confgureplus/**currentsession**.bash_local            : include'able session single-file (bash)

## .configureplus/**doc**/varname
Each file contains annotation for a single variable. These can be global, or dynamically declared.

- .configureplus/**doc**/CONFIGUREPLUS_SESSIONS
- .configureplus/**doc**/CONFIGURE_MKTEMP
- .configureplus/**doc**/CONFIGURE_DIR_OUTPUT_SESSIONS
- .configureplus/**doc**/CONFIGURE_DIR_OUTPUT
- .configureplus/**doc**/CONFIGURE_FLAG_TOOL_BTEST
- .configureplus/**doc**/CONFIGURE_OSTYPE
- .configureplus/**doc**/CONFIGURE_PKGNAME
- .configureplus/**doc**/CONFIGURE_DIR_TEMPLATE
- .configureplus/**doc**/CONFIGURE_VERSION


# EXAMPLE

- .configureplus
- .configureplus/Makefile
- .configureplus/**dynamic.bash**
- .configureplus/**global**
- .configureplus/**global**/CONFIGUREPLUS_SESSION                         # variable
- .configureplus/**global**/CONFIGURE_DIR_OUTPUT                          # variable
- .configureplus/**global**/CONFIGURE_PKGNAME                             # variable
- .configureplus/**global**/CONFIGURE_DIR_TEMPLATE                        # variable
- .configureplus/**global**/CONFIGURE_VERSION                             # variable
- .configureplus/**global.bash_local**
- .configureplus/**global.bash**
- .configureplus/**global.mk**
- .configureplus/**doc**
- .configureplus/**doc**/CONFIGUREPLUS_SESSIONS
- .configureplus/**doc**/CONFIGURE_MKTEMP
- .configureplus/**doc**/CONFIGURE_DIR_OUTPUT_SESSIONS
- .configureplus/**doc**/CONFIGURE_DIR_OUTPUT
- .configureplus/**doc**/CONFIGURE_FLAG_TOOL_BTEST
- .configureplus/**doc**/CONFIGURE_OSTYPE
- .configureplus/**doc**/CONFIGURE_PKGNAME
- .configureplus/**doc**/CONFIGURE_DIR_TEMPLATE
- .configureplus/**doc**/CONFIGURE_VERSION
- .configureplus/**session**
- .configureplus/**session**/darwin19
- .configureplus/**session**/darwin19/CONFIGUREPLUS_DIR_OUT               # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS_SESSION               # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS_PWD                   # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS_DIR_CONFIG            # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS_VERSION               # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS_DIR_OUT_SESSIONS      # variable
- .configureplus/**session**/darwin19/CONFIGURE_MKTEMP                    # variable
- .configureplus/**session**/darwin19/CONFIGURE_TIMESTAMP                 # variable
- .configureplus/**session**/darwin19/CONFIGURE_DIR_OUTPUT                # variable
- .configureplus/**session**/darwin19/CONFIGURE_FLAG_TOOL_BTEST           # variable
- .configureplus/**session**/darwin19/CONFIGURE_OSTYPE                    # variable
- .configureplus/**session**/darwin19/CONFIGURE_PKGNAME                   # variable
- .configureplus/**session**/darwin19/CONFIGURE_DIR_TEMPLATE              # variable
- .configureplus/**session**/darwin19/CONFIGURE_BASH_PROFILE_FILE         # variable
- .configureplus/**session**/darwin19/CONFIGURE_VERSION                   # variable
- .configureplus/**session**/darwin19.bash_local
- .configureplus/**session**/darwin19.bash
- .configureplus/**session**/darwin19.mk
- .configureplus/**currentsession.bash**
- .configureplus/**currentsession.mk**

# Author

Murat Uenalan <murat.uenalan@gmail.com>

UNTIL_HERE

    exit
fi

# defaults

if [ ! -d "$CONFIGUREPLUS_DIR_CONFIG" ]; then
    
    export CONFIGUREPLUS_DIR_CONFIG_EMPTY=1

    warn_local "init $CONFIGUREPLUS_DIR_CONFIG"

    mkdir -p $CONFIGUREPLUS_DIR_CONFIG
    
fi


if [[ ! "$CONFIGUREPLUS_DEBUG" ]]; then

    CONFIGUREPLUS_DEBUG=$0

fi


if [[ "$1" == '--detect-os' ]]; then

    echo $OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION

    warn_local "--detect-os: \$OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION"

fi
      
if [[ -z "$CONFIGUREPLUS_SESSION" ]]; then

    warn_local CONFIGUREPLUS_SESSION not set. Looking for "$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION"

    if [ -f "$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION" ]; then

	CONFIGUREPLUS_SESSION=$(cat $CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION)
	
	warn_local Loading $CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION=$CONFIGUREPLUS_SESSION
	
    else

        if [ "$CONFIGUREPLUS_DIR_OUT" == `basename $PWD` ]; then

            warn_local "init $CONFIGUREPLUS_DIR_OUT ... *SKIP* because we are currently inside one."

            exit
        fi

	CONFIGUREPLUS_DEBUG=1 warn_local ERROR_NOT_SET_CONFIGUREPLUS_SESSION
	
	warn_local Will invoke: mkdir -p $CONFIGUREPLUS_DIR_OUT/global

        mkdir -p $CONFIGUREPLUS_DIR_OUT/global

	warn_local Will invoke: echo $OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION

	echo $OSTYPE >$CONFIGUREPLUS_DIR_OUT/global/CONFIGUREPLUS_SESSION

	warn_local Retry configureplus again.

	exit
    fi

fi




if [[ "$1" == 'list' ]]; then

    configureplus_sessions_list

    exit
fi

if [[ "$1" == 'env' ]]; then

    configureplus_env

    exit
fi

if [[ "$1" == 'status' ]]; then

    configureplus_status

    exit
fi


if [[ "$1" == 'set' ]]; then

    configureplus_set $2 $3 $4

    exit
fi

if [[ "$1" == 'get' ]]; then

    configureplus_get $2 $3

    exit
fi




# $CONFIGUREPLUS_SESSION

mkdir -p $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION

# dynamic

if [ ! -f $CONFIGUREPLUS_DIR_OUT/dynamic.bash ]; then

    warn_local Probing $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash
    
    if [ -f $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash ]; then

        warn_local cp $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash $CONFIGUREPLUS_DIR_OUT/

        cp $CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/dynamic.bash $CONFIGUREPLUS_DIR_OUT/

    else

        warn_local touch $CONFIGUREPLUS_DIR_OUT/dynamic.bash

        touch $CONFIGUREPLUS_DIR_OUT/dynamic.bash

    fi
    

fi


if [ ! -d $CONFIGUREPLUS_DIR_OUT/global ]; then

    mkdir -p $CONFIGUREPLUS_DIR_OUT/global 

fi

warn_local source $CONFIGUREPLUS_DIR_OUT/dynamic.bash

source $CONFIGUREPLUS_DIR_OUT/dynamic.bash

# global

for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

    cp $VARFILE $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/

done

# std

>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_PWD              echo $CONFIGUREPLUS_PWD
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_SESSION          echo $CONFIGUREPLUS_SESSION
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_VERSION          echo $CONFIGUREPLUS_VERSION
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_DIR_CONFIG       echo $CONFIGUREPLUS_DIR_CONFIG
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_DIR_OUT          echo $CONFIGUREPLUS_DIR_OUT
>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS_DIR_OUT_SESSIONS echo $CONFIGUREPLUS_DIR_OUT_SESSIONS


# functions

function summary
{
    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%-60s [%s]\n" "$VARFILE = '$(cat $VARFILE)'" "$(cat $DOCFILE)"

	else

	    echo $VARFILE "=" `cat $VARFILE`
	fi
	
	
    done
}


# mk

function generate_configure_global_mk
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.mk

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.mk
    echo "# Note: space before a comment are part of a variable" >>$CONFIGUREPLUS_DIR_OUT/global.mk

    echo >>$CONFIGUREPLUS_DIR_OUT/global.mk

    for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%s# %s\n" "$BASENAME=\$(shell cat $VARFILE)" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.mk

	else

	    echo "$BASENAME=\$(shell cat $VARFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.mk
	fi
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.mk generated
}

function generate_configure_session_mk
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk
    echo "# Note: space before a comment are part of a variable" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%s# %s\n" "$BASENAME=\$(shell cat $VARFILE)" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk

	else

	    echo "$BASENAME=\$(shell cat $VARFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk
	fi
	
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.mk generated
}

function generate_configure_global_bash
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.bash

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.bash

    echo >>$CONFIGUREPLUS_DIR_OUT/global.bash

    for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "export %-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.bash

	else

	    printf "export %s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT/global.bash
	fi
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.bash generated
}



function generate_configure_global_bash_local
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.bash_local

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.bash_local

    echo >>$CONFIGUREPLUS_DIR_OUT/global.bash_local

    for VARFILE in $CONFIGUREPLUS_DIR_OUT/global/*; do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT/global.bash_local

	else

	    printf "%s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT/global.bash_local
	fi
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.bash_local generated
}

function generate_configure_global_json
{
    echo >$CONFIGUREPLUS_DIR_OUT/global.json

    # JSON does not support comments
    #    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo "[" >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo >>$CONFIGUREPLUS_DIR_OUT/global.json


    local ARRAY=($CONFIGUREPLUS_DIR_OUT/global/*)

    local ARRAY_LEN=${#ARRAY[@]}

    local CNT=1

    for VARFILE in ${ARRAY[@]}; do

	local BASENAME=$(basename $VARFILE)

        COMMA=

        if [[ $CNT < $ARRAY_LEN ]]; then

            COMMA=,
            
        fi

	printf -v VAR '   "%s" : "%s"%s'  $BASENAME "$(cat $VARFILE)" $COMMA

        echo "$VAR"  >>$CONFIGUREPLUS_DIR_OUT/global.json

	let CNT=$CNT+1
        
    done

    echo >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo "]" >>$CONFIGUREPLUS_DIR_OUT/global.json

    echo INFO: $CONFIGUREPLUS_DIR_OUT/global.json generated
}





# session

function generate_configure_session_bash
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "export %-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash

	else

	    printf "export %s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash
	fi
	
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash generated
}

function generate_configure_session_bash_local
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

    echo "# Generated with configureplus (CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION, CONFIGUREPLUS_PWD=$CONFIGUREPLUS_PWD)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

    for VARFILE in $(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort); do

	BASENAME=$(basename $VARFILE)

	DOCFILE=$CONFIGUREPLUS_DIR_OUT/doc/$BASENAME

	if [ -f $DOCFILE ]; then

	    printf "%-85s # %s\n" "$BASENAME='$(cat $VARFILE)'" "$(cat $DOCFILE)" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local

	else

	    printf "%s\n" "$BASENAME='$(cat $VARFILE)'" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local
	fi
	
	
    done

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.bash_local generated
}

function generate_configure_session_json
{
    echo >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo "[" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    local ARRAY=($(echo $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/*|sort))

    local ARRAY_LEN=${#ARRAY[@]}

    local CNT=1

    for VARFILE in ${ARRAY[@]}; do

	BASENAME=$(basename $VARFILE)

        COMMA=

#        echo CNT=$CNT ARRAY_LEN=$ARRAY_LEN
        
        if [[ $CNT -lt $ARRAY_LEN ]]; then

            COMMA=,
            
        fi

	printf -v VAR '   "%s" : "%s"%s'  $BASENAME "$(cat $VARFILE)" $COMMA

        echo "$VAR"  >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

	let CNT=$CNT+1

    done

    echo >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo "]" >>$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json

    echo INFO: $CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION.json generated
}

# main

summary

generate_configure_global_mk

generate_configure_global_bash

generate_configure_global_bash_local

generate_configure_global_json

generate_configure_session_mk

generate_configure_session_bash

generate_configure_session_bash_local

generate_configure_session_json


function join_array_comma
{
    local SEP=$1

    shift
    
    local ARRAY=$@
    
    ARRAY_LEN=${#ARRAY[@]}

#    echo ARRAY="${ARRAY[@]} .."
    
#    echo ARRAY_LEN=$ARRAY_LEN

    CNT=1

    RESULT=()

    for ENTRY in ${ARRAY[@]}; do

        COMMA=

        if [[ $CNT -lt $ARRAY_LEN ]]; then

            COMMA=,
            
        fi

	printf -v VAR '%s%s' $ENTRY $COMMA

        echo "VAR=$VAR"
        
        RESULT=("${RESULT[@]}" $VAR)
                
	let CNT=$CNT+1

    done

    echo ${RESULT[@]}
}

#test
#join_array_comma ",\n" "ALPHA : 1" "BETA : 2" "GAMMA : 3"

