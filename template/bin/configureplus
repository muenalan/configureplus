#!/bin/bash

#==============================================================================
#
#         FILE: configureplus
#
#        USAGE: ./configureplus [--verbose] [--global] [--detect-os] <command> [args]
#
#  DESCRIPTION: A minimal autoconf-like configure tool that depends only on bash.
#               It simplifies the process of managing project configurations
#               across different platforms and environments.
#
#      OPTIONS: See 'configureplus usage' for more information
#
# REQUIREMENTS: bash
#         BUGS: Report bugs to https://github.com/muenalan/configureplus/issues
#        NOTES: This is a foundational tool, where development is towards robustness instead of innovation.
#       AUTHOR: Murat Uenalan <murat.uenalan@gmail.com>
# ORGANIZATION: Your Organization Name (if applicable)
#      CREATED: 03/16/2023
#     REVISION: 06/21/2024
#==============================================================================

# Set script name
SCRIPT_NAME=$(basename "$0")

EXEFILE=`which $0`

if [[ -z "$CONFIGUREPLUS_BASEDIR" ]];then
    
    CONFIGUREPLUS_BASEDIR=/usr/local

fi

source $CONFIGUREPLUS_BASEDIR/lib/configureplus/configureplus.bash

# Help function

function configureplus_help_show
{
    echo "Usage: $SCRIPT_NAME [--verbose] [--global] [--detect-os] <command> [options] [args]"
    echo
    echo "Sub-Commands:"
    echo "  help <command>        Get help for a specific command"
    echo "  version               Show the version"
    echo "  readme                Show the readme (in markdown format)"
    echo "  man                   Show the manual page (in markdown format)"
    echo "  generate              Update .configureplus; or ~/.config/$SCRIPT_NAME/.$SCRIPT_NAME, if --global is set. (default command)"
    echo "  env                   Show environment variables"
    echo "  set <varname> <value> Set a variable (See doc 'Variable Lookup Order' section)"
    echo "  get <varname>         Get a variable value (See doc 'Variable Lookup Order' section)"
    echo "  status                Show configuration tree"
    echo "  list                  List session paths"
    echo " "
    echo "Sub-Commands (devel):"
    echo "  bootstrap             Bootstrap a new .configureplus directory, step-by-step"
    echo " "
    echo "Options:"
    echo "  --verbose           Print more information"
    echo "  --home              Operate on home configuration"
    echo "  --global            Operate on global configuration (can be combined with --home)"
    echo "  --detect-os         Detect and save ostype"
    echo
    echo "For more information, use '$SCRIPT_NAME help <command>'"
}

if [[ -z "$CONFIGUREPLUS_INVOCATION" ]]; then

    CONFIGUREPLUS_INVOCATION=UNKNOWN

    # Check if the script is being sourced
    if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        CONFIGUREPLUS_INVOCATION=SOURCED # echo "Script is being sourced"
    else
        CONFIGUREPLUS_INVOCATION=RUN # echo "Script is being run"
        # Your main script logic here
    fi

fi




# Example usage:
# configureplus_help "set"

function configureplus_help 
{
    local command="$1"

    case "$command" in
        version)
            echo "Usage: configureplus version"
            echo "Displays the version."
            ;;
        usage)
            echo "Usage: configureplus usage"
            echo "Displays the general usage information for configureplus."
            ;;
        readme)
            echo "Usage: configureplus readme"
            echo "Displays the readme for configureplus in markdown format."
            echo "  Options:"
            echo "   --f|format=markdown           Format"
            ;;
        man)
            echo "Usage: configureplus man"
            echo "Displays the full manual for configureplus in markdown format."
            echo "  Options:"
            echo "   --f|format=markdown           Format"
            ;;
        env)
            echo "Usage: configureplus env"
            echo "Shows all environment variables set by configureplus."
            ;;
        generate)
            echo "Usage: configureplus generate"
            echo "Update the dynamic files from variables. Default folder: .configureplus. If --global is active, ~/.config/$SCRIPT_NAME/.$SCRIPT_NAME"
            echo "  Options:"
            echo "   --f|force           Force overwriting {planned}"
            echo "   --d|dryrun          Dryrun            {planned}"
            ;;
        bootstrap)
            echo "Usage: configureplus bootstrap"
            echo "Prepare everything for the baselines (bootstrap, step-by-step). Default folder: .configureplus. If --global is active, ~/.config/$SCRIPT_NAME/.$SCRIPT_NAME"
            echo "  Options:"
            echo "   --f|force           Force overwriting {planned}"
            echo "   --d|dryrun          Dryrun            {planned}"
            ;;
        set)
            echo "Usage: configureplus set <varname> <value>"
            echo "Sets a variable for the current session or globally."
            echo "  <varname>: The name of the variable to set"
            echo "  <value>: The value to assign to the variable"
            echo "  [--home]: Optional. If specified, sets the variable from home (~/.config/configureplus)"
            echo "  [--global]: Optional. If specified, sets the variable globally"
            ;;
        get)
            echo "Usage: configureplus get <varname>"
            echo "Gets the value of a variable from the current session or globally."
            echo "  <varname>: The name of the variable to get"
            echo "  [--home]: Optional. If specified, gets the global variable from home (~/.config/configureplus)"
            echo "  [--global]: Optional. If specified, gets the global variable"
            ;;
        status)
            echo "Usage: configureplus status"
            echo "Displays the local and global configuration tree structure."
            echo "  Options:"
            echo "   --f|format=filetree             Format (Default: FileTree) {planned}"
            ;;
        list)
            echo "Usage: configureplus list"
            echo "Lists all local and global session paths."
            ;;
        *)
            echo "Unknown command: $command"
            echo "Available commands: usage, man, env, set, get, status, list"
            echo "Use 'configureplus help <command>' for more information on a specific command."
            ;;
    esac
}

function configureplus_readme
{

cat <<'UNTIL_HERE'

# configureplus

Configureplus is a minimal autoconf-like configure tool that depends only on bash. It simplifies the process of managing project configurations across different platforms and environments.

## Features

- Cross-platform configuration management
- Session-based configurations
- Variable management with documentation support
- Multiple output formats (Makefile, Bash, JSON)
- Minimal dependencies (requires only bash)
- Automated configuration file generation
- Flexible and extensible

## Installation

### macOS (darwin19)

```bash
$ make
$ cd build
$ make
$ cd platform/darwin19
$ make install  # for user profile installation
# OR
$ make install-systemwide  # for system-wide installation
```

### Linux (linux-gnu)

```bash
$ make
$ cd build
$ make
$ cd platform/linux-gnu
$ make install  # for user profile installation
# OR
$ make install-systemwide  # for system-wide installation
```

## Usage

Basic usage:

```bash
$ configureplus <command> [args]
```

Available commands:

- `man`: Show the manual page (in markdown format)
- `help <command>`: Get help for a specific command
- `env`: Show environment variables
- `set <varname> <value>`: Set a variable (for the current session or globally)
- `get <varname>`: Get a variable value
- `status`: Show local/global configuration tree
- `list`: List local/global session paths

## Examples

```bash
# Set a variable
$ configureplus set ALPHA 123

# Get a variable
$ configureplus get ALPHA
123

# Create a local session (ostype) CONFIGUREPLUS_SESSION var
$ configureplus get CONFIGUREPLUS_SESSION

# Fetch (create if not exists) a local session 'local1', SESSION var 
$ CONFIGUREPLUS_SESSION=local1 configureplus get CONFIGUREPLUS_SESSION

# Update global session (ostype)
$ configureplus --global
```

## Variable Lookup Order

The `get` function in configureplus searches for variables in a specific order across local, session, and global directories. This allows for flexible configuration management with clear precedence rules.

### Search Order

When you use `configureplus get <varname>`, the tool searches for the variable in the following order:

1. **Local Session**: `$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/<varname>`
   - This is specific to the current working directory and session.

2. **Global Session**: `$CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/<varname>`
   - This is specific to the current session but applies across all directories.

3. **Global Default**: `$CONFIGUREPLUS_DIR_CONFIG/$CONFIGUREPLUS_DIR_OUT/global/<varname>`
   - This is the fallback for all sessions and directories.

### Example

Let's say you're looking for the variable `ALPHA`:

```bash
$ configureplus get ALPHA
```

The tool will search in this order:

1. `./.configureplus/session/current_session/ALPHA`
2. `~/.config/configureplus/.configureplus/session/current_session/ALPHA`
3. `~/.config/configureplus/.configureplus/global/ALPHA`

It will return the value from the first location where the variable is found. If the variable is not found in any of these locations, it will return an empty result.

### Using the `global` Flag

If you use the `global` flag:

```bash
$ configureplus get ALPHA global
```

The tool will skip the local session search and only look in the global session and global default locations.

### Listing Available Sessions

You can use the `list` command to see all available sessions:

```bash
$ configureplus list
```

This will show you:
- Global sessions in `~/.config/configureplus/.configureplus/session/`
- Local sessions in the current directory's `.configureplus/session/` (if it exists)

Understanding this search order helps you manage your configurations effectively across different scopes and sessions.

## Configuration Files

Configureplus generates several configuration files:

- `.configureplus/global.mk`: Global Makefile include
- `.configureplus/global.bash`: Global Bash script (with exports)
- `.configureplus/global.bash_local`: Global Bash script (without exports)
- `.configureplus/global.json`: Global JSON configuration
- `.configureplus/session/<session-id>.mk`: Session-specific Makefile include
- `.configureplus/session/<session-id>.bash`: Session-specific Bash script (with exports)
- `.configureplus/session/<session-id>.bash_local`: Session-specific Bash script (without exports)
- `.configureplus/session/<session-id>.json`: Session-specific JSON configuration

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

[Add your chosen license here]

## Author

Murat Uenalan <murat.uenalan@gmail.com>


    

UNTIL_HERE

}

    
    

function configureplus_man
{

    cat <<UNTIL_HERE

DOCUMENTATION
=============

# configureplus

Minimal autoconfig-like configure tool. Can be used to locally create a (.$SCRIPT_NAME) folder, which holds variables about the platform. Custom variables can be added. 
Moreover, a global fallback for variables is available (~/.config/$SCRIPT_NAME/.$SCRIPT_NAME)

# Synopsis

 $ make install
 $ pushd build/platforms/darwin19
 $ make install-systemwide
 $ configureplus man
 $ cd somewhere
 $ configureplus                                              # create a local .configureplus/ folder with default platform variables (use $OSTYPE)
 $ CONFIGUREPLUS_SESSION=local1 configureplus set ALPHA 123   # set variable ALPHA in session 'local1'
 $ CONFIGUREPLUS_SESSION=local1 configureplus get ALPHA      
 123
 
# Description

Architecture dependency is traditionally detected with an universal **configure** tool. This packages provide similar means, and is not intended to be compatible to the **autoconf** chain. However, it solves a similar generic problem, but beeing more granular and more friendly.

# Aims

- Be universal, with absolute minimal prerequisites: bash.
- Keep it simple. Files are variables, that are used at each step.
- A recorded configuration should be transportable (such as stored in ~/.config for reuse).
- Multiple configurations (sessions) should be able to co-exists. Allowing the switch to a particular **session-key**; testing different versions.

# Supported platforms
This is a multiarch package, where during the build process the platform is detected and a architecture dependant version is manufactured into the platforms directory.

## darwin19 (macos)
There are two alternative installation options. Per default, the program is unpacked into this directory, and the userprofile is modified to include the corresponding bin/ into the PATH system variable.

### INSTALL userprofile (darwin19)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/darwin19
    $ make install
      .. installing userprofile

### INSTALL systemwide (darwin19)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/darwin19
    $ make install-systemwide
      .. installing systemwide

## linux-gnu
There are two alternative installation options. Per default, the program is unpacked into this directory, and the userprofile is modified to include the corresponding bin/ into the PATH system variable.

### INSTALL userprofile (linux-gnu)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/linux-gnu
    $ make install
      .. installing userprofile

### INSTALL systemwide (linux-gnu)

    $ make
      .. building target platform
    $ cd build
    $ make
    $ cd platform/linux-gnu
    $ make install-systemwide
      .. installing systemwide

# SYNOPSIS (darwin19)

    # Warn, because .configureplus/session/darwin19/CONFIGUREPLUS/SESSION is not set
    
    $ configureplus
    [WARN stdout, configureplus] : { ERROR_NOT_SET_CONFIGUREPLUS_SESSION }
    [WARN stdout, configureplus] : { Will invoke: echo darwin19 }
    [WARN stdout, configureplus] : { Retry configureplus again. }    

    $ configureplus
    [WARN stdout, configureplus] : { Loading .configureplus/global/CONFIGUREPLUS/SESSION=darwin19 }
- .configureplus/session/darwin19/CONFIGUREPLUS/DIR_CONFIG = /Users/muenalan/.config/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS/DIR_OUT = .configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS/DIR_OUT_SESSIONS = .configureplus/session
- .configureplus/session/darwin19/CONFIGUREPLUS/PWD = /Users/muenalan/git-workdirs/github.com/muenalan/bash/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS/SESSION = 'darwin19' [session-id (such as $OSTYPE)]
- .configureplus/session/darwin19/CONFIGUREPLUS/VERSION = 0.1
- .configureplus/session/darwin19/CONFIGURE/BASH_PROFILE_FILE = /Users/muenalan/.bash_profile
- .configureplus/session/darwin19/CONFIGURE/DIR_OUTPUT = 'platforms' [folder for general and os-specific files (merged with CONFIG_DIR_TEMPLATE)]
- .configureplus/session/darwin19/CONFIGURE/DIR_TEMPLATE = 'template' [folder for os-specific files and template files merged]
- .configureplus/session/darwin19/CONFIGURE/FLAG_TOOL_BTEST = '' [btest *testing* tool path]
- .configureplus/session/darwin19/CONFIGURE/GIT_TAG = v0.0.1
- .configureplus/session/darwin19/CONFIGURE/MKTEMP = '/var/folders/px/ctnmlq5n5gbf154mj25wzdxh0000gn/T/tmp.FU7FWYDy' [make session temp dir]
- .configureplus/session/darwin19/CONFIGURE/OSTYPE = 'darwin19' [current os identifier]
- .configureplus/session/darwin19/CONFIGURE/PKGNAME = 'configureplus' [distribution package name]
- .configureplus/session/darwin19/CONFIGURE/TIMESTAMP = Mon May 22 11:41:16 CEST 2023
- .configureplus/session/darwin19/CONFIGURE/VERSION = '0.0.1'  [distribution version]
    INFO: .configureplus/global.mk generated
    INFO: .configureplus/global.bash generated
    INFO: .configureplus/global.bash_local generated
    INFO: .configureplus/session/darwin19.mk generated
    INFO: .configureplus/session/darwin19.bash generated
    INFO: .configureplus/session/darwin19.bash_local generated

    $ configureplus
    Configuring (darwin19) ...
- .configureplus/session/darwin19/CONFIGUREPLUS/DIR_CONFIG = /Users/muenalan/.config/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS/DIR_OUT = .configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS/DIR_OUT_SESSIONS = .configureplus/session
- .configureplus/session/darwin19/CONFIGUREPLUS/PWD = /Users/muenalan/git-workdirs/github.com/muenalan/bash/configureplus
- .configureplus/session/darwin19/CONFIGUREPLUS/SESSION = darwin19
- .configureplus/session/darwin19/CONFIGUREPLUS/VERSION = 0.1
- .configureplus/session/darwin19/CONFIGURE/BASH_PROFILE_FILE = /Users/muenalan/.bash_profile
- .configureplus/session/darwin19/CONFIGURE/DIR_OUTPUT = 'platforms' [folder for general and os-specific files (merged with CONFIG_DIR_TEMPLATE)]
- .configureplus/session/darwin19/CONFIGURE/DIR_TEMPLATE = 'template' [folder for os-specific files and template files merged]
- .configureplus/session/darwin19/CONFIGURE/FLAG_TOOL_BTEST = '' [btest *testing* tool path]
- .configureplus/session/darwin19/CONFIGURE/MKTEMP = '/var/folders/px/ctnmlq5n5gbf154mj25wzdxh0000gn/T/tmp.2i0aHmR6' [make session temp dir]
- .configureplus/session/darwin19/CONFIGURE/OSTYPE = 'darwin19' [current os identifier]
- .configureplus/session/darwin19/CONFIGURE/PKGNAME = 'configureplus' [distribution package name]
- .configureplus/session/darwin19/CONFIGURE/TIMESTAMP = Thu May 18 16:54:08 CEST 2023
- .configureplus/session/darwin19/CONFIGURE/VERSION = '0.1'    [distribution version]
- INFO: .configureplus/global.mk generated
- INFO: .configureplus/global.bash generated
- INFO: .configureplus/global.bash_local generated
- INFO: .configureplus/session/darwin19.mk generated
- INFO: .configureplus/session/darwin19.bash generated
- INFO: .configureplus/session/darwin19.bash_local generated
    $ echo value1 .configureplus/global/var1
    $ echo value2 .configureplus/global/var2
    $ echo value3 .configureplus/global/var3
    $ cat .configureplus/dynamic.bash
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE/BASH_PROFILE_FILE echo $HOME/.bash_profile
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGUREPLUS/DIR_CONFIG    echo $HOME/.config/$CONFIGURE_PKG
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE/OSTYPE            echo $OSTYPE 
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE/MKTEMP            echo `mktemp -d` 
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE/FLAG_TOOL_BTEST   which btest
      >$CONFIGUREPLUS_DIR_OUT_SESSIONS/$CONFIGUREPLUS_SESSION/CONFIGURE/TIMESTAMP         date
  
# INPUT .configureplus
Files are used to configure the configuration variables.

# SPEC

- .configureplus/global/**VARNAME**                      : global variables, stored as single files
- .confgureplus/**global**.mk                            : global variables single-file (Makefile part)
- .confgureplus/**global**.bash                          : global variables single-file (bash source, export)
- .confgureplus/**global**.bash_local                    : global variables single-file (bash source)
- .configureplus/doc/**VARNAME**                         : variable description, single file
- .confgureplus/session/**session-id**/**VARSESSION-ID** : variable file of session **session-id**
- .confgureplus/session/**session-id**.mk                : session as include'able Makefile part
- .confgureplus/session/**session-id**.bash              : session as include'able bash source (exported variables)
- .confgureplus/session/**session-id**.bash_local        : session as include'able bash source
- .confgureplus/**dynamic**.bash                         : script invoked by configureplus
- .confgureplus/**currentsession**.mk                    : include'able session single-file (Makefile part)
- .confgureplus/**currentsession**.bash                  : include'able session single-file (bash, export)
- .confgureplus/**currentsession**.bash_local            : include'able session single-file (bash)

## .configureplus/**doc**/varname
Each file contains annotation for a single variable. These can be global, or dynamically declared.

- .configureplus/**doc**/CONFIGUREPLUS/SESSIONS
- .configureplus/**doc**/CONFIGURE/MKTEMP
- .configureplus/**doc**/CONFIGURE/DIR_OUTPUT_SESSIONS
- .configureplus/**doc**/CONFIGURE/DIR_OUTPUT
- .configureplus/**doc**/CONFIGURE/FLAG_TOOL_BTEST
- .configureplus/**doc**/CONFIGURE/OSTYPE
- .configureplus/**doc**/CONFIGURE/PKGNAME
- .configureplus/**doc**/CONFIGURE/DIR_TEMPLATE
- .configureplus/**doc**/CONFIGURE/VERSION


# EXAMPLE

- .configureplus
- .configureplus/Makefile
- .configureplus/**dynamic.bash**
- .configureplus/**global**
- .configureplus/**global**/CONFIGUREPLUS/SESSION                         # variable
- .configureplus/**global**/CONFIGURE/DIR_OUTPUT                          # variable
- .configureplus/**global**/CONFIGURE/PKGNAME                             # variable
- .configureplus/**global**/CONFIGURE/DIR_TEMPLATE                        # variable
- .configureplus/**global**/CONFIGURE/VERSION                             # variable
- .configureplus/**global.bash_local**
- .configureplus/**global.bash**
- .configureplus/**global.mk**
- .configureplus/**doc**
- .configureplus/**doc**/CONFIGUREPLUS/SESSIONS
- .configureplus/**doc**/CONFIGURE/MKTEMP
- .configureplus/**doc**/CONFIGURE/DIR_OUTPUT_SESSIONS
- .configureplus/**doc**/CONFIGURE/DIR_OUTPUT
- .configureplus/**doc**/CONFIGURE/FLAG_TOOL_BTEST
- .configureplus/**doc**/CONFIGURE/OSTYPE
- .configureplus/**doc**/CONFIGURE/PKGNAME
- .configureplus/**doc**/CONFIGURE/DIR_TEMPLATE
- .configureplus/**doc**/CONFIGURE/VERSION
- .configureplus/**session**
- .configureplus/**session**/darwin19
- .configureplus/**session**/darwin19/CONFIGUREPLUS/DIR_OUT               # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS/SESSION               # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS/PWD                   # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS/DIR_CONFIG            # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS/VERSION               # variable
- .configureplus/**session**/darwin19/CONFIGUREPLUS/DIR_OUT_SESSIONS      # variable
- .configureplus/**session**/darwin19/CONFIGURE/MKTEMP                    # variable
- .configureplus/**session**/darwin19/CONFIGURE/TIMESTAMP                 # variable
- .configureplus/**session**/darwin19/CONFIGURE/DIR_OUTPUT                # variable
- .configureplus/**session**/darwin19/CONFIGURE/FLAG_TOOL_BTEST           # variable
- .configureplus/**session**/darwin19/CONFIGURE/OSTYPE                    # variable
- .configureplus/**session**/darwin19/CONFIGURE/PKGNAME                   # variable
- .configureplus/**session**/darwin19/CONFIGURE/DIR_TEMPLATE              # variable
- .configureplus/**session**/darwin19/CONFIGURE/BASH_PROFILE_FILE         # variable
- .configureplus/**session**/darwin19/CONFIGURE/VERSION                   # variable
- .configureplus/**session**/darwin19.bash_local
- .configureplus/**session**/darwin19.bash
- .configureplus/**session**/darwin19.mk
- .configureplus/**currentsession.bash**
- .configureplus/**currentsession.mk**

# Author

Murat Uenalan <murat.uenalan@gmail.com>

UNTIL_HERE

    exit
}

# Main script logic

if [[ "$CONFIGUREPLUS_INVOCATION" == "RUN" ]]; then

    echo_local_level 1 Main script logic, CONFIGUREPLUS_DEBUG=$CONFIGUREPLUS_DEBUG

    echo_local_level 2                                    PWD=$PWD

    # Note that we use `"$@"' to let each command-line parameter expand to a 
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.

    GETOPT_RESULTS=`getopt -o dhgon:c:: --long debug,home,global,detect-os,name:,c-long:: -n $SCRIPT_NAME -- "$@"`

    if [ $? != 0 ] ; then
        
        echo "*FATAL* getopt invokation failed. Terminating..." >&2
        
        exit 1 
    fi

    # Note the quotes around `$GETOPT_RESULTS': they are essential!

    echo_local_level 2 getopt RESULTS: "$GETOPT_RESULTS"
    
    eval set -- "$GETOPT_RESULTS"

    while true ; do
        case "$1" in
            -d|--debug) 
	        warn_local "Option d" 
                CONFIGUREPLUS_DEBUG=$0
	        shift 
	        ;;
            -h|--home) 
	        warn_local "Option h"
	        shift 
                CONFIGUREPLUS_OPTION_FLAG_HOME=true
	        ;;
            -g|--global) 
	        warn_local "Option g"
	        shift 
                CONFIGUREPLUS_OPTION_FLAG_GLOBAL=true
	        ;;
            -o|--detect-os) 
	        warn_local "Option o"
                CONFIGUREPLUS_OPTION_FLAG_DETECT_OS=true                
                configureplus_setup
                configureplus_session_var_update_ostype
	        shift 
	        ;;
            -n|--name) 
	        warn_local "Option n, argument \`$2'" ; 
	        shift 2 
	        ;;
            -c|--c-long) 
                # c has an optional argument. As we are in quoted mode,
                # an empty parameter will be generated if its optional
                # argument is not found.
                case "$2" in
                    "") 
		        warn_local "Option c, no argument"
		        shift 2 
		        ;;
                    *)  
		        warn_local "Option c, argument \`$2'"
		        shift 2 
		        ;;
                esac 
	        ;;
            --) 
	        shift 
	        break 
	        ;;
            *) 
	        echo "Internal error!" 
	        exit 1 
	        ;;
        esac
    done

    echo_local_level 2 "Remaining getopt arguments:"

    for arg;
    do 
        echo_local_level 2 '    - ARG:  '"\`$arg'" ; 
    done



    # Default command is now 'generate'
    COMMAND=${1:-generate}

    case "$COMMAND" in
        generate)
            configureplus_setup
            configureplus_generate
            ;;
        version)
            echo CONFIGUREPLUS_VERSION=$CONFIGUREPLUS_VERSION
            exit 0
            ;;
        readme)
            # Your existing readme commmed logic
            configureplus_readme
            ;;
        man)
            # Your existing man command logic
            configureplus_man
            ;;
        help)
            # Your existing help command logic
            if [[ -z "$2" ]]; then
	        
                configureplus_help_show
                
            else
	        
                configureplus_help "$2"
                
            fi
            ;;
        env)
            # Your existing env command logic
            configureplus_env
            ;;
        
        bootstrap)
            # Start from scratch and init to baseline

            configureplus_setup_bootstrap
            ;;
        
        set)
            # Your existing set command logic
            configureplus_setup
            configureplus_set $2 $3 $4
            ;;
        get)
            # Your existing get command logic
            configureplus_setup
            configureplus_get $2 $3
            ;;
        add)
            # Your existing set command logic
            configureplus_setup
            configureplus_add $2 $3 $4
            ;;
        remove)
            # Your existing get command logic
            configureplus_setup
            configureplus_remove $2 $3
            ;;
        status)
            # Your existing status command logic
            #configureplus_setup
            configureplus_status
	    exit 0
            ;;
        list)
            # Your existing list command logic
            configureplus_setup
            configureplus_sessions_list
            ;;
        *)
            echo "Unknown command: $COMMAND"
            configureplus_help_show
            exit 1
            ;;
    esac
else
    echo "Script is being sourced, will not invoke main."
fi



